import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { useQuery, useLazyQuery, useMutation, gql } from "@apollo/client";
import { motion, AnimatePresence } from "framer-motion";
import { useTheme } from "../../contexts/ThemeContext";
import { 
Â  CheckCircle, 
Â  AlertTriangle, 
Â  Calendar, 
Â  User, 
Â  FileText, 
Â  Target,
Â  Loader,
Â  Send,
Â  Users,
Â  Clock,
Â  Mail,
Â  UserCheck,
Â  X,
Â  Brain,
Â  Star,
Â  TrendingUp,
Â  Award,
Â  Zap,
Â  Github
} from "lucide-react";
import { useResponsive } from "../../hooks/useResponsive";


// GraphQL Query to fetch leads by project ID
const GET_LEADS_BY_PROJECT_ID = gql`
  query GetLeadsByProjectId($projectId: ID!) {
    getLeadsByProjectId(projectId: $projectId) {
      teamLeads {
        teamLeadId
        leadRole
        user {
          id
          username
          email
        }
      }
    }
  }
`;

// GraphQL Query for AI suggestions
const SUGGEST_ASSIGNEES = gql`
  query SuggestAssignees($input: SuggestAssigneesInput!) {
    suggestAssignees(input: $input) {
      bestUser {
        userId
        username
        role
        score
        reasons
        profile {
          id
          GithubUsername
          availability
          workload
          skills {
            name
            proficiency
            experienceYears
          }
          experience {
            totalYears
            currentLevel
            projectsCompleted
          }
          performance {
            completionRate
            averageRating
            collaborationScore
          }
        }
      }
      rankedList {
        userId
        username
        role
        score
        reasons
        profile {
          id
          GithubUsername
          availability
          workload
          skills {
            name
            proficiency
          }
          experience {
            totalYears
            currentLevel
          }
          performance {
            completionRate
            averageRating
          }
        }
      }
    }
  }
`;

// GraphQL Mutation to assign a task
const ASSIGN_TASK = gql`
  mutation AssignTask(
    $projectId: ID!
    $title: String!
    $assignedTo: ID!
    $priority: String
    $dueDate: String
    $description: String
  ) {
    assignTask(
      projectId: $projectId
      title: $title
      assignedTo: $assignedTo
      priority: $priority
      dueDate: $dueDate
      description: $description
    ) {
      success
      message
    }
  }
`;


// ...[Your GraphQL queries and mutations remain unchanged]...

const CreateTaskModal = ({ isOpen, onClose, onSuccess }) => {
Â  const { projectId } = useParams();
Â  const { isDark } = useTheme();
Â  const { breakpoint, width, isMobile, isTablet } = useResponsive();

Â  const [taskTitle, setTaskTitle] = useState("");
Â  const [description, setDescription] = useState("");
Â  const [priority, setPriority] = useState("Medium");
Â  const [dueDate, setDueDate] = useState("");
Â  const [assignedTo, setAssignedTo] = useState("");
Â  const [showSuccess, setShowSuccess] = useState(false);
Â  const [notification, setNotification] = useState({ show: false, type: "", message: "" });
Â  const [showAISuggestions, setShowAISuggestions] = useState(false);
Â  const [aiSuggestions, setAiSuggestions] = useState(null);

Â  // Responsive styles
Â  const layoutDirection = isMobile ? "flex-col" : "flex-row";
Â  const aiWidth = isMobile ? "w-full" : "w-96";
Â  const formWidth = isMobile ? "w-full" : "flex-1";
Â  const modalPadding = isMobile ? "p-3" : "p-6";
Â  const modalMaxWidth = isMobile ? "max-w-full" : "max-w-5xl";

Â  // Today's date for input min validation
Â  const today = new Date().toISOString().split('T')[0];

Â  // Fetch team leads based on project ID (only when modal is open)
Â  const { data, loading, error } = useQuery(GET_LEADS_BY_PROJECT_ID, {
Â  Â  variables: { projectId },
Â  Â  skip: !isOpen,
Â  });

Â  // AI Suggestions Query (lazy execution)
Â  const [getSuggestions, { loading: suggestionsLoading }] = useLazyQuery(SUGGEST_ASSIGNEES, {
Â  Â  onCompleted: (data) => {
Â  Â  Â  setAiSuggestions(data.suggestAssignees);
Â  Â  Â  setShowAISuggestions(true);
Â  Â  },
Â  Â  onError: (error) => {
Â  Â  Â  console.error('AI Suggestions Error:', error);
Â  Â  Â  showNotification("error", "Failed to get AI suggestions");
Â  Â  }
Â  });

Â  // Remove duplicate leads
Â  const uniqueTeamLeads = Array.from(
Â  Â  new Map(
Â  Â  Â  (data?.getLeadsByProjectId?.teamLeads || []).map((lead) => [lead.teamLeadId, lead])
Â  Â  ).values()
Â  );

Â  // Find selected assignee details
Â  const selectedAssignee = uniqueTeamLeads.find(lead => lead.teamLeadId === assignedTo);

Â  // Use Mutation Hook
Â  const [assignTask, { loading: assignLoading }] = useMutation(ASSIGN_TASK, {
Â  Â  onCompleted: (data) => {
Â  Â  Â  if (data.assignTask.success) {
Â  Â  Â  Â  setShowSuccess(true);
Â  Â  Â  Â  showNotification("success", "Task assigned successfully!");
Â  Â  Â  Â  resetForm();
Â  Â  Â  Â  if (onSuccess) onSuccess();
Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  setShowSuccess(false);
Â  Â  Â  Â  Â  onClose();
Â  Â  Â  Â  }, 2000);
Â  Â  Â  } else {
Â  Â  Â  Â  showNotification("error", data.assignTask.message || "Failed to assign task");
Â  Â  Â  }
Â  Â  },
Â  Â  onError: () => {
Â  Â  Â  showNotification("error", "Failed to assign task. Please try again.");
Â  Â  },
Â  });

Â  const resetForm = () => {
Â  Â  setTaskTitle("");
Â  Â  setDescription("");
Â  Â  setPriority("Medium");
Â  Â  setDueDate("");
Â  Â  setAssignedTo("");
Â  Â  setShowAISuggestions(false);
Â  Â  setAiSuggestions(null);
Â  };

Â  const showNotification = (type, message) => {
Â  Â  setNotification({ show: true, type, message });
Â  Â  setTimeout(() => setNotification({ show: false, type: "", message: "" }), 4000);
Â  };

Â  // Get AI suggestions when task details change
Â  const handleGetAISuggestions = () => {
Â  Â  if (uniqueTeamLeads.length === 0) {
Â  Â  Â  showNotification("error", "Please add team leads first before getting AI suggestions.");
Â  Â  Â  return;
Â  Â  }
Â  Â  const missingFields = [];
Â  Â  if (!taskTitle.trim()) missingFields.push("Task Title");
Â  Â  if (!description.trim()) missingFields.push("Description");
Â  Â  if (!priority) missingFields.push("Priority");
Â  Â  if (!dueDate) missingFields.push("Due Date");
Â  Â  // Show error if any fields are missing
Â  Â  if (missingFields.length > 0) {
Â  Â  Â  const fieldsList = missingFields.join(", ");
Â  Â  Â  showNotification("error", `Please fill in the following fields first: ${fieldsList}`);
Â  Â  Â  return;
Â  Â  }
Â  Â  // Due date should not be in the past
Â  Â  if (dueDate && dueDate < today) {
Â  Â  Â  showNotification("error", "Due date cannot be in the past");
Â  Â  Â  return;
Â  Â  }
Â  Â  getSuggestions({
Â  Â  Â  variables: {
Â  Â  Â  Â  input: {
Â  Â  Â  Â  Â  projectId,
Â  Â  Â  Â  Â  title: taskTitle,
Â  Â  Â  Â  Â  description: description || "",
Â  Â  Â  Â  Â  priority,
Â  Â  Â  Â  Â  dueDate: dueDate || undefined
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  });
Â  };

Â  const handleSelectSuggestion = (userId) => {
Â  Â  setAssignedTo(userId);
Â  Â  setShowAISuggestions(false);
Â  };

Â  const handleCreateTask = () => {
Â  Â  if (!taskTitle.trim() || !assignedTo) {
Â  Â  Â  showNotification("error", "Task title and assigned user are required");
Â  Â  Â  return;
Â  Â  }
Â  Â  if (dueDate && dueDate < today) {
Â  Â  Â  showNotification("error", "Due date cannot be in the past");
Â  Â  Â  return;
Â  Â  }
Â  Â  assignTask({
Â  Â  Â  variables: {
Â  Â  Â  Â  projectId,
Â  Â  Â  Â  title: taskTitle,
Â  Â  Â  Â  description,
Â  Â  Â  Â  assignedTo,
Â  Â  Â  Â  priority,
Â  Â  Â  Â  dueDate,
Â  Â  Â  },
Â  Â  });
Â  };

Â  const handleClose = () => {
Â  Â  resetForm();
Â  Â  onClose();
Â  };

Â  const getPriorityColor = (priority) => {
Â  Â  switch (priority) {
Â  Â  Â  case 'High': return 'text-red-600 bg-red-50 dark:text-red-400 dark:bg-red-900/20 border-red-200 dark:border-red-800';
Â  Â  Â  case 'Medium': return 'text-yellow-600 bg-yellow-50 dark:text-yellow-400 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800';
Â  Â  Â  case 'Low': return 'text-green-600 bg-green-50 dark:text-green-400 dark:bg-green-900/20 border-green-200 dark:border-green-800';
Â  Â  Â  default: return 'text-txt-secondary-light dark:text-txt-secondary-dark bg-bg-accent-light dark:bg-bg-accent-dark border-gray-200 dark:border-gray-600';
Â  Â  }
Â  };

Â  const getPriorityIcon = (priority) => {
Â  Â  switch (priority) {
Â  Â  Â  case 'High': return 'ðŸ”´';
Â  Â  Â  case 'Medium': return 'ðŸŸ¡';
Â  Â  Â  case 'Low': return 'ðŸŸ¢';
Â  Â  Â  default: return 'âšª';
Â  Â  }
Â  };

Â  const getScoreColor = (score) => {
Â  Â  if (score >= 80) return 'text-green-600 dark:text-green-400';
Â  Â  if (score >= 60) return 'text-yellow-600 dark:text-yellow-400';
Â  Â  return 'text-red-600 dark:text-red-400';
Â  };

Â  const getScoreIcon = (score) => {
Â  Â  if (score >= 80) return <Award className="w-4 h-4" />;
Â  Â  if (score >= 60) return <TrendingUp className="w-4 h-4" />;
Â  Â  return <Target className="w-4 h-4" />;
Â  };

Â  if (!isOpen) return null;
Â Â 
Â  return (
Â  Â  <>
Â  Â  Â  {/* Success Overlay */}
Â  Â  Â  <AnimatePresence>
Â  Â  Â  Â  {showSuccess && (
Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[60] flex items-center justify-center"
Â  Â  Â  Â  Â  Â  initial={{ opacity: 0 }}
Â  Â  Â  Â  Â  Â  animate={{ opacity: 1 }}
Â  Â  Â  Â  Â  Â  exit={{ opacity: 0 }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  Â  className="bg-bg-primary-light dark:bg-bg-primary-dark p-8 rounded-2xl shadow-2xl text-center max-w-md mx-4 border border-gray-200/20 dark:border-gray-700/20"
Â  Â  Â  Â  Â  Â  Â  initial={{ scale: 0.8, y: 20 }}
Â  Â  Â  Â  Â  Â  Â  animate={{ scale: 1, y: 0 }}
Â  Â  Â  Â  Â  Â  Â  exit={{ scale: 0.8, y: 20 }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <div className="w-16 h-16 bg-gradient-to-r from-brand-accent-500 to-brand-accent-600 rounded-full flex items-center justify-center mx-auto mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  <CheckCircle className="w-8 h-8 text-white" />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <h3 className="font-heading text-xl font-bold text-heading-primary-light dark:text-heading-primary-dark mb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Task Created Successfully!
Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  <p className="font-body text-txt-secondary-light dark:text-txt-secondary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  The task has been assigned to the team lead
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  )}
Â  Â  Â  </AnimatePresence>

Â  Â  Â  {/* Notification */}
Â  Â  Â  <AnimatePresence>
Â  Â  Â  Â  {notification.show && (
Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  className="fixed top-4 right-4 z-[55]"
Â  Â  Â  Â  Â  Â  initial={{ opacity: 0, x: 300 }}
Â  Â  Â  Â  Â  Â  animate={{ opacity: 1, x: 0 }}
Â  Â  Â  Â  Â  Â  exit={{ opacity: 0, x: 300 }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <div className={`p-4 rounded-xl shadow-lg border ${
Â  Â  Â  Â  Â  Â  Â  notification.type === 'success' 
Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800' 
Â  Â  Â  Â  Â  Â  Â  Â  : 'bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800'
Â  Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Â  <p className={`text-sm font-medium ${
Â  Â  Â  Â  Â  Â  Â  Â  notification.type === 'success' 
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'text-green-800 dark:text-green-200' 
Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'text-red-800 dark:text-red-200'
Â  Â  Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Â  Â  {notification.message}
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  )}
Â  Â  Â  </AnimatePresence>

Â  Â  Â  {/* Main Modal */}
Â  Â  Â  <motion.div
Â  Â  Â  Â  className={`fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-2 ${isMobile ? 'items-end' : 'items-center'}`}
Â  Â  Â  Â  initial={{ opacity: 0 }}
Â  Â  Â  Â  animate={{ opacity: 1 }}
Â  Â  Â  Â  exit={{ opacity: 0 }}
Â  Â  Â  Â  onClick={handleClose}
Â  Â  Â  >
Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  className={`bg-bg-primary-light dark:bg-bg-primary-dark rounded-2xl shadow-2xl ${modalMaxWidth} w-full max-h-[95vh] overflow-y-auto border border-gray-200/20 dark:border-gray-700/20 ${modalPadding}`}
Â  Â  Â  Â  Â  initial={{ scale: 0.9, y: 20 }}
Â  Â  Â  Â  Â  animate={{ scale: 1, y: 0 }}
Â  Â  Â  Â  Â  exit={{ scale: 0.9, y: 20 }}
Â  Â  Â  Â  Â  style={{ width: isMobile ? "100%" : undefined, margin: isMobile ? "0" : undefined}}
Â  Â  Â  Â  Â  onClick={(e) => e.stopPropagation()}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <div className="flex items-center justify-between mb-4">
Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-3">
Â  Â  Â  Â  Â  Â  Â  <div className="w-10 h-10 bg-gradient-to-br from-brand-primary-500 to-brand-secondary-500 rounded-xl flex items-center justify-center shadow-lg">
Â  Â  Â  Â  Â  Â  Â  Â  <Target className="w-5 h-5 text-white" />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="font-heading text-2xl font-bold text-heading-primary-light dark:text-heading-primary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Create New Task
Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-body text-txt-secondary-light dark:text-txt-secondary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  AI-powered task assignment for optimal team performance
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={handleClose}
Â  Â  Â  Â  Â  Â  Â  className="p-2 hover:bg-bg-accent-light dark:hover:bg-bg-accent-dark rounded-lg transition-colors"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <X className="w-5 h-5 text-txt-secondary-light dark:text-txt-secondary-dark" />
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Layout: Responsive Columns */}
Â  Â  Â  Â  Â  <div className={`flex gap-6 ${layoutDirection}`}>
Â  Â  Â  Â  Â  Â  {/* Left - Form */}
Â  Â  Â  Â  Â  Â  <div className={`${formWidth} space-y-6`}>
Â  Â  Â  Â  Â  Â  Â  {/* Task Title */}
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="flex items-center gap-2 font-body font-medium text-txt-primary-light dark:text-txt-primary-dark mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <FileText className="w-4 h-4 text-brand-primary-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Task Title *
Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Enter task title..."
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={taskTitle}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setTaskTitle(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-4 py-3 bg-bg-accent-light dark:bg-bg-accent-dark border border-gray-200 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent text-txt-primary-light dark:text-txt-primary-dark font-body transition-all duration-200"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* Description */}
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="flex items-center gap-2 font-body font-medium text-txt-primary-light dark:text-txt-primary-dark mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <FileText className="w-4 h-4 text-brand-primary-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Description
Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Describe the task in detail..."
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={description}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setDescription(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  rows={4}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-4 py-3 bg-bg-accent-light dark:bg-bg-accent-dark border border-gray-200 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent text-txt-primary-light dark:text-txt-primary-dark font-body transition-all duration-200 resize-none"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* Priority and Due Date */}
Â  Â  Â  Â  Â  Â  Â  <div className={`grid grid-cols-1 ${isMobile ? "" : "md:grid-cols-2"} gap-6`}>
Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="flex items-center gap-2 font-body font-medium text-txt-primary-light dark:text-txt-primary-dark mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Target className="w-4 h-4 text-brand-primary-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Priority Level
Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={priority}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setPriority(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-4 py-3 bg-bg-accent-light dark:bg-bg-accent-dark border border-gray-200 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent text-txt-primary-light dark:text-txt-primary-dark font-body transition-all duration-200"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Low">ðŸŸ¢ Low Priority</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Medium">ðŸŸ¡ Medium Priority</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="High">ðŸ”´ High Priority</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mt-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-xs font-medium border ${getPriorityColor(priority)}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {getPriorityIcon(priority)} {priority} Priority
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="flex items-center gap-2 font-body font-medium text-txt-primary-light dark:text-txt-primary-dark mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Calendar className="w-4 h-4 text-brand-primary-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Due Date
Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="date"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={dueDate}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  min={today}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setDueDate(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-4 py-3 bg-bg-accent-light dark:bg-bg-accent-dark border border-gray-200 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent text-txt-primary-light dark:text-txt-primary-dark font-body transition-all duration-200"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* AI Suggestions Button */}
Â  Â  Â  Â  Â  Â  Â  <div className="bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 border border-purple-200 dark:border-purple-800 rounded-xl p-4">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Brain className="w-5 h-5 text-purple-600 dark:text-purple-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium text-txt-primary-light dark:text-txt-primary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  AI-Powered Suggestions
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleGetAISuggestions}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={!taskTitle.trim() || suggestionsLoading || uniqueTeamLeads.length === 0}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  !taskTitle.trim() || suggestionsLoading || uniqueTeamLeads.length === 0
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-gray-200 dark:bg-gray-700 text-gray-500 cursor-not-allowed'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white shadow-lg hover:shadow-xl'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {suggestionsLoading ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Loader className="w-4 h-4 animate-spin" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Analyzing...
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Zap className="w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Get Suggestions
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-txt-secondary-light dark:text-txt-secondary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {uniqueTeamLeads.length === 0 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "No team leads found. Please add at least one team lead before using AI suggestions."
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "Let AI analyze your task and recommend the best team leads based on skills, workload, and performance."
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* Manual Assignment */}
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="flex items-center gap-2 font-body font-medium text-txt-primary-light dark:text-txt-primary-dark mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <User className="w-4 h-4 text-brand-primary-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Assign to Team Lead *
Â  Â  Â  Â  Â  Â  Â  Â  </label>

Â  Â  Â  Â  Â  Â  Â  Â  {loading ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-3 p-4 bg-bg-accent-light dark:bg-bg-accent-dark rounded-xl border border-gray-200 dark:border-gray-600">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Loader className="w-5 h-5 animate-spin text-brand-primary-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-body text-txt-secondary-light dark:text-txt-secondary-dark">Loading team leads...</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  ) : error ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-3 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AlertTriangle className="w-5 h-5 text-red-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-body text-red-600 dark:text-red-400">Error loading team leads</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  ) : uniqueTeamLeads.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-3 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-xl">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AlertTriangle className="w-5 h-5 text-yellow-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-body text-yellow-700 dark:text-yellow-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  No team leads found. Please add team leads before creating a task.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={assignedTo}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setAssignedTo(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-4 py-3 bg-bg-accent-light dark:bg-bg-accent-dark border border-gray-200 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent text-txt-primary-light dark:text-txt-primary-dark font-body transition-all duration-200"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select Team Lead</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {uniqueTeamLeads.map((lead) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={lead.teamLeadId} value={lead.teamLeadId}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {lead.user.username} ({lead.leadRole})
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  {/* Selected Assignee Preview */}
Â  Â  Â  Â  Â  Â  Â  Â  {selectedAssignee && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <motion.div 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-4 p-4 bg-brand-primary-50 dark:bg-brand-primary-900/20 border border-brand-primary-200 dark:border-brand-primary-800 rounded-xl"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  initial={{ opacity: 0, y: 10 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  animate={{ opacity: 1, y: 0 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-12 h-12 bg-gradient-to-br from-brand-primary-500 to-brand-primary-600 rounded-full flex items-center justify-center text-white">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <UserCheck className="w-6 h-6" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2 mb-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <User className="w-4 h-4 text-brand-primary-600 dark:text-brand-primary-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium text-txt-primary-light dark:text-txt-primary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedAssignee.user.username}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="px-2 py-1 bg-brand-primary-100 dark:bg-brand-primary-800/30 text-brand-primary-700 dark:text-brand-primary-300 text-xs rounded-full font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedAssignee.leadRole}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Mail className="w-4 h-4 text-txt-secondary-light dark:text-txt-secondary-dark" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm text-txt-secondary-light dark:text-txt-secondary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedAssignee.user.email}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* Action Buttons */}
Â  Â  Â  Â  Â  Â  Â  <div className="flex gap-4 pt-6 flex-col sm:flex-row">
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleClose}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full sm:w-auto px-4 py-3 bg-bg-accent-light dark:bg-bg-accent-dark text-txt-primary-light dark:text-txt-primary-dark rounded-xl border border-gray-200 dark:border-gray-600 hover:bg-bg-secondary-light dark:hover:bg-bg-secondary-dark transition-colors font-medium"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  <motion.button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleCreateTask}
Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={assignLoading || !taskTitle.trim() || !assignedTo}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`w-full sm:w-auto flex items-center justify-center gap-3 py-3 rounded-xl font-button font-medium transition-all duration-200 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  assignLoading || !taskTitle.trim() || !assignedTo
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-gray-300 dark:bg-gray-600 text-gray-500 cursor-not-allowed'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'bg-gradient-to-r from-brand-primary-500 to-brand-primary-600 hover:from-brand-primary-600 hover:to-brand-primary-700 text-white shadow-lg hover:shadow-xl'
Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  whileHover={!assignLoading && taskTitle.trim() && assignedTo ? { scale: 1.02 } : {}}
Â  Â  Â  Â  Â  Â  Â  Â  Â  whileTap={!assignLoading && taskTitle.trim() && assignedTo ? { scale: 0.98 } : {}}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {assignLoading ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Loader className="w-5 h-5 animate-spin" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Creating Task...
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Send className="w-5 h-5" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Create & Assign Task
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </motion.button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* Right - AI Suggestions (hidden on small if not open) */}
Â  Â  Â  Â  Â  Â  <AnimatePresence>
Â  Â  Â  Â  Â  Â  Â  {showAISuggestions && aiSuggestions && (
Â  Â  Â  Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`${aiWidth} bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 border border-purple-200 dark:border-purple-800 rounded-xl p-6 mt-6 sm:mt-0 sm:ml-6 shrink-0`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  initial={{ opacity: 0, x: 300 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  animate={{ opacity: 1, x: 0 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  exit={{ opacity: 0, x: 300 }}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2 mb-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Brain className="w-6 h-6 text-purple-600 dark:text-purple-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="font-heading text-lg font-bold text-txt-primary-light dark:text-txt-primary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  AI Recommendations
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ...The AI suggestions UI remains unchanged... */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.bestUser && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mb-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2 mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Star className="w-5 h-5 text-yellow-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium text-txt-primary-light dark:text-txt-primary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Best Match
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-white dark:bg-bg-primary-dark border border-gray-200 dark:border-gray-700 rounded-lg p-4 cursor-pointer hover:shadow-lg transition-all duration-200"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  whileHover={{ scale: 1.02 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleSelectSuggestion(aiSuggestions.bestUser.userId)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-start justify-between mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="font-medium text-txt-primary-light dark:text-txt-primary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.bestUser.username}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h4>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm text-txt-secondary-light dark:text-txt-secondary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.bestUser.role}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`flex items-center gap-1 ${getScoreColor(aiSuggestions.bestUser.score)}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {getScoreIcon(aiSuggestions.bestUser.score)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-bold text-lg">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {Math.round(aiSuggestions.bestUser.score)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Profile Info */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.bestUser.profile && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-2 mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.bestUser.profile.GithubUsername && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Github className="w-4 h-4 text-gray-600 dark:text-gray-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm text-txt-secondary-light dark:text-txt-secondary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.bestUser.profile.GithubUsername}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TrendingUp className="w-4 h-4 text-green-600 dark:text-green-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm text-txt-secondary-light dark:text-txt-secondary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Workload: {aiSuggestions.bestUser.profile.workload}%
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.bestUser.profile.skills?.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-wrap gap-1 mt-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.bestUser.profile.skills.slice(0, 3).map((skill, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={index}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-2 py-1 bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 text-xs rounded-full"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {skill.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.bestUser.profile.skills.length > 3 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="px-2 py-1 bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 text-xs rounded-full">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  +{aiSuggestions.bestUser.profile.skills.length - 3}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Reasons */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.bestUser.reasons.slice(0, 2).map((reason, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={index} className="flex items-start gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-1.5 h-1.5 bg-purple-500 rounded-full mt-2 flex-shrink-0" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-xs text-txt-secondary-light dark:text-txt-secondary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {reason}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="w-full mt-3 px-3 py-2 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-lg text-sm font-medium hover:from-purple-600 hover:to-blue-600 transition-all duration-200">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Select This User
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Other Suggestions */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.rankedList?.length > 1 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2 mb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Users className="w-5 h-5 text-blue-600 dark:text-blue-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium text-txt-primary-light dark:text-txt-primary-dark">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Other Options
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {aiSuggestions.rankedList.filter(user => user.userId !== aiSuggestions.bestUser?.userId).slice(0, 3).map((user) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={user.userId}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-white dark:bg-bg-primary-dark border border-gray-200 dark:border-gray-700 rounded-lg p-3 cursor-pointer hover:shadow-md transition-all duration-200"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  whileHover={{ scale: 1.01 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleSelectSuggestion(user.userId)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between mb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium text-txt-primary-light dark:text-txt-primary-dark text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {user.username}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`flex items-center gap-1 ${getScoreColor(user.score)}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-bold text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {Math.round(user.score)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {user.reasons[0] && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-txt-secondary-light dark:text-txt-secondary-dark truncate">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {user.reasons[0]}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowAISuggestions(false)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full mt-4 px-3 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg text-sm font-medium hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Close Suggestions
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </AnimatePresence>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </motion.div>
Â  Â  Â  </motion.div>
Â  Â  </>
Â  );
};

export default CreateTaskModal;
